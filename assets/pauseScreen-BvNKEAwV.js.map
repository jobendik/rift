{"version":3,"file":"pauseScreen-BvNKEAwV.js","sources":["../../app/pauseScreen.js"],"sourcesContent":["// Pause screen with 3D soldier model\nimport * as THREE from \"three\";\nimport { FBXLoader } from \"three/addons/loaders/FBXLoader.js\";\nimport { EffectComposer } from \"three/addons/postprocessing/EffectComposer.js\";\nimport { RenderPass } from \"three/addons/postprocessing/RenderPass.js\";\nimport { UnrealBloomPass } from \"three/addons/postprocessing/UnrealBloomPass.js\";\n\nlet scene, camera, renderer, soldier;\nlet mixer, clock;\nlet composer; // For post-processing effects\nlet isInitialized = false;\nlet animationId = null;\n\n// Initialize the 3D scene for the pause screen\nfunction init() {\n    if (isInitialized) return;\n    isInitialized = true;\n    \n    // Create scene\n    scene = new THREE.Scene();\n    scene.background = null; // Transparent background - IMPORTANT FOR TRANSPARENCY\n    \n    // Create camera with consistent aspect ratio\n    const fixedAspectRatio = 350/450;\n    camera = new THREE.PerspectiveCamera(38, fixedAspectRatio, 0.1, 1000); // Reduced field of view for better fit\n    camera.position.set(0, 0.2, 6); // Positioned farther back to see the full model\n    camera.lookAt(0, 0, 0); // Center the view\n    \n    // Improved lighting setup for better model visibility\n    // Main ambient light - brighter to ensure model is well lit\n    const ambientLight = new THREE.AmbientLight(0x404040, 3); \n    scene.add(ambientLight);\n\n    // Key light (main light) - from front-top\n    const keyLight = new THREE.DirectionalLight(0xffffff, 5); \n    keyLight.position.set(0, 5, 5);\n    scene.add(keyLight);\n\n    // Rim light for edge highlighting - from behind\n    const rimLight = new THREE.DirectionalLight(0x4466ff, 4); \n    rimLight.position.set(0, 2, -5);\n    scene.add(rimLight);\n    \n    // Fill light from the side\n    const fillLight = new THREE.DirectionalLight(0xffaa88, 2); \n    fillLight.position.set(-5, 0, 2);\n    scene.add(fillLight);\n    \n    // Create renderer with proper settings for transparency\n    renderer = new THREE.WebGLRenderer({ \n        antialias: true, \n        alpha: true, // CRITICAL FOR TRANSPARENCY\n        premultipliedAlpha: false, // Better transparency handling\n        preserveDrawingBuffer: true, // Important for visibility\n        precision: \"highp\" // Higher precision rendering for better quality\n    });\n    \n    // Set fixed size regardless of screen size to prevent stretching\n    const fixedWidth = 350;\n    const fixedHeight = 450;\n    renderer.setSize(fixedWidth, fixedHeight); // Fixed dimensions to prevent stretching\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.setClearColor(0x000000, 0); // Set clear color with completely transparent alpha\n    \n    // Setup post-processing with special care for transparency\n    try {\n        // Create a custom render target with alpha channel support\n        const renderTarget = new THREE.WebGLRenderTarget(350, 450, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat, // Important for alpha channel\n            encoding: THREE.sRGBEncoding,\n            samples: 4 // Anti-aliasing\n        });\n        \n        const renderPass = new RenderPass(scene, camera);\n        renderPass.clear = true;\n        renderPass.clearColor = new THREE.Color(0, 0, 0);\n        renderPass.clearAlpha = 0; // Completely transparent\n        \n        const bloomPass = new UnrealBloomPass(\n            new THREE.Vector2(350, 450),\n            0.4,  // reduced strength for better transparency\n            0.35, // reduced radius for cleaner bloom\n            0.85  // threshold\n        );\n        \n        // Create composer with our custom render target\n        composer = new EffectComposer(renderer, renderTarget);\n        composer.addPass(renderPass);\n        composer.addPass(bloomPass);\n    } catch (error) {\n        console.error(\"Post-processing setup failed:\", error);\n        // Continue without post-processing\n    }\n    \n    // Get the pause model container and append renderer\n    const pauseModelContainer = document.getElementById(\"pauseModelContainer\");\n    if (pauseModelContainer) {\n        pauseModelContainer.innerHTML = \"\";\n        pauseModelContainer.appendChild(renderer.domElement);\n        \n        // Style the renderer canvas for proper visibility and centered positioning\n        renderer.domElement.style.position = \"absolute\";\n        renderer.domElement.style.bottom = \"0px\"; // Position at bottom of container\n        renderer.domElement.style.left = \"50%\"; // Center horizontally\n        renderer.domElement.style.transform = \"translateX(-50%)\"; // Complete the centering\n        \n        // Set fixed dimensions to prevent stretching in fullscreen\n        renderer.domElement.style.width = \"350px\";\n        renderer.domElement.style.height = \"450px\";\n        renderer.domElement.style.maxWidth = \"350px\"; // Prevent stretching\n        renderer.domElement.style.maxHeight = \"450px\"; // Prevent stretching\n        renderer.domElement.style.objectFit = \"contain\"; // Maintain aspect ratio\n        \n        renderer.domElement.style.zIndex = \"5\";\n        renderer.domElement.style.pointerEvents = \"none\"; \n        renderer.domElement.style.background = \"transparent\"; // Ensure transparent background\n        renderer.domElement.style.backgroundColor = \"transparent\"; // Double ensure transparency\n        renderer.domElement.classList.add(\"transparent-canvas\"); // Add class for additional styling\n    }\n    \n    // Initialize clock for animations\n    clock = new THREE.Clock();\n\n    // Load the soldier model\n    loadSoldierModel();\n\n    // Handle window resize\n    window.addEventListener(\"resize\", onWindowResize, false);\n}\n\nfunction loadSoldierModel() {\n    const loader = new FBXLoader();\n    console.log(\"Loading soldier model for pause screen from models/soldierFrontPage.fbx\");\n    \n    loader.load(\"models/soldierFrontPage.fbx\",\n        // Success callback\n        (fbx) => {\n            console.log(\"Soldier model loaded successfully for pause screen\");\n            soldier = fbx;\n            \n            // Calculate the bounding box to properly position the model\n            let boundingBox = new THREE.Box3().setFromObject(soldier);\n            let modelHeight = boundingBox.max.y - boundingBox.min.y;\n            let modelWidth = boundingBox.max.x - boundingBox.min.x;\n            \n            // Scale the model to fit the view (smaller scale for full visibility)\n            const scale = 0.011; // Further reduced scale to ensure entire model is clearly visible\n            soldier.scale.set(scale, scale, scale);\n            \n            // Position the model so it is fully visible\n            let yOffset = -boundingBox.min.y * scale;\n            soldier.position.set(0, yOffset - 0.4, 0); // Adjust vertical position for better visibility\n            \n            // Make sure model is facing camera with slight angle for better view\n            soldier.rotation.y = Math.PI * 0.9; // Slight angle for better presentation\n            \n            // Set up animation if the model has animations\n            if (fbx.animations && fbx.animations.length) {\n                console.log(`Found ${fbx.animations.length} animations for pause screen model`);\n                mixer = new THREE.AnimationMixer(fbx);\n                const action = mixer.clipAction(fbx.animations[0]);\n                action.play();\n            } else {\n                console.log(\"No animations found in the model for pause screen\");\n            }\n\n            // Add model to the scene\n            scene.add(soldier);\n            \n            // Start animation loop\n            animate();\n        },\n        // Progress callback\n        (xhr) => {\n            console.log(`Pause screen model loading: ${Math.floor(xhr.loaded / xhr.total * 100)}% loaded`);\n        },\n        // Error callback\n        (error) => {\n            console.error(\"Error loading pause screen soldier model:\", error);\n            \n            // Try alternate path\n            console.log(\"Attempting to load from alternate path: /models/soldierFrontPage.fbx\");\n            loader.load(\"/models/soldierFrontPage.fbx\",\n                (fbx) => {\n                    console.log(\"Soldier model loaded successfully from alternate path for pause screen\");\n                    soldier = fbx;\n                    \n                    // Calculate the bounding box to properly position the model\n                    let boundingBox = new THREE.Box3().setFromObject(soldier);\n                    let modelHeight = boundingBox.max.y - boundingBox.min.y;\n                    let modelWidth = boundingBox.max.x - boundingBox.min.x;\n                    \n                    // Scale the model to fit the view (smaller scale for full visibility)\n                    const scale = 0.011; // Further reduced scale to ensure entire model is clearly visible\n                    soldier.scale.set(scale, scale, scale);\n                    \n                    // Position the model so it is fully visible\n                    let yOffset = -boundingBox.min.y * scale;\n                    soldier.position.set(0, yOffset - 0.4, 0); // Adjust vertical position for better visibility\n                    \n                    // Make sure model is facing camera with slight angle for better view\n                    soldier.rotation.y = Math.PI * 0.9; // Slight angle for better presentation\n                    \n                    if (fbx.animations && fbx.animations.length) {\n                        mixer = new THREE.AnimationMixer(fbx);\n                        mixer.clipAction(fbx.animations[0]).play();\n                    }\n                    \n                    scene.add(soldier);\n                    animate();\n                },\n                null,\n                () => {\n                    console.error(\"All attempts to load the pause screen model failed\");\n                    animate(); // Still animate even without model to avoid blank screen\n                }\n            );\n        }\n    );\n}\n\nfunction animate() {\n    if (!isInitialized) return;\n    \n    animationId = requestAnimationFrame(animate);\n    \n    const delta = clock.getDelta();\n    const time = clock.getElapsedTime();\n    \n    // Smooth rotation for the soldier\n    if (soldier) {\n        // Smooth, constant rotation speed - slightly slower for better viewing\n        soldier.rotation.y = (time * 0.15) % (Math.PI * 2) + Math.PI * 0.7; // One full rotation every ~42 seconds, with a better viewing angle\n    }\n    \n    // Update animations\n    if (mixer) {\n        mixer.update(delta);\n    }\n    \n    // Ensure transparency on every frame - CRITICAL FOR FIXING THE BLACK BACKGROUND\n    renderer.setClearColor(0x000000, 0);\n    scene.background = null;\n    \n    // Ensure viewport is still correct\n    renderer.setViewport(0, 0, 350, 450);\n    \n    // Render with transparency\n    if (composer) {\n        // Clear to transparent before rendering\n        renderer.clear();\n        composer.render();\n    } else {\n        // Standard renderer with transparency\n        renderer.clear();\n        renderer.render(scene, camera);\n    }\n}\n\nfunction onWindowResize() {\n    if (!camera || !renderer) return;\n    \n    // Keep a fixed aspect ratio for the camera regardless of window size\n    // This prevents the model from appearing stretched\n    const fixedAspectRatio = 350/450;\n    camera.aspect = fixedAspectRatio;\n    camera.updateProjectionMatrix();\n    \n    // For the pause screen, we keep a fixed size for the model view\n    // This helps prevent stretching when in fullscreen\n    renderer.setSize(350, 450);\n    \n    // Update composer if available\n    if (composer) {\n        composer.setSize(350, 450);\n    }\n    \n    // Ensure the container maintains proper dimensions in fullscreen mode\n    const pauseModelContainer = document.getElementById(\"pauseModelContainer\");\n    if (pauseModelContainer) {\n        pauseModelContainer.style.width = \"350px\";\n        pauseModelContainer.style.height = \"450px\";\n    }\n}\n\nfunction cleanup() {\n    if (!isInitialized) return;\n    \n    // Cancel animation frame\n    if (animationId !== null) {\n        cancelAnimationFrame(animationId);\n        animationId = null;\n    }\n    \n    window.removeEventListener(\"resize\", onWindowResize);\n    \n    // Dispose of resources\n    if (mixer) mixer.stopAllAction();\n    if (renderer) renderer.dispose();\n    if (scene) {\n        scene.traverse((object) => {\n            if (object.isMesh) {\n                object.geometry.dispose();\n                if (object.material) {\n                    if (Array.isArray(object.material)) {\n                        object.material.forEach((material) => material.dispose());\n                    } else {\n                        object.material.dispose();\n                    }\n                }\n            }\n        });\n    }\n    \n    isInitialized = false;\n}\n\nexport { init, cleanup };"],"names":["scene","camera","renderer","soldier","mixer","clock","composer","isInitialized","animationId","init","THREE.Scene","fixedAspectRatio","THREE.PerspectiveCamera","ambientLight","THREE.AmbientLight","keyLight","THREE.DirectionalLight","rimLight","fillLight","THREE.WebGLRenderer","THREE.SRGBColorSpace","renderTarget","THREE.WebGLRenderTarget","THREE.LinearFilter","THREE.RGBAFormat","THREE.sRGBEncoding","renderPass","RenderPass","THREE.Color","bloomPass","UnrealBloomPass","THREE.Vector2","EffectComposer","error","pauseModelContainer","THREE.Clock","loadSoldierModel","onWindowResize","loader","FBXLoader","fbx","boundingBox","THREE.Box3","scale","yOffset","THREE.AnimationMixer","animate","xhr","delta","time","cleanup","object","material"],"mappings":"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"}