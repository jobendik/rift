# RIFT FPS UI/CSS Redesign Project Rules

This file captures key project patterns, preferences, and learnings that will help guide development decisions and maintain consistency throughout the UI/CSS redesign process.

## Project Structure Guidelines

### UI Component Organization
- Each UI component should be in its own file within the appropriate subdirectory
- Component hierarchy should be reflected in directory structure
- Follow the pattern: `src/components/ui/[category]/[ComponentName].js`
- Example: `src/components/ui/hud/HealthDisplay.js`

### CSS Structure
- CSS files should mirror component structure
- Use BEM naming convention with `rift-` prefix
- Follow the pattern: `public/styles/components/[component-category].css`
- Variables should be defined in `public/styles/variables.css`

### Asset Naming and Organization
- Images should use kebab-case: `damage-indicator-front.png`
- Organize assets by type (textures, models, animations, etc.)
- UI-specific assets should be in `public/assets/hud/`

## Code Style Preferences

### JavaScript Conventions
- Use ES6+ syntax consistently
- Class names should be PascalCase
- Method and variable names should be camelCase
- Constants should be UPPER_SNAKE_CASE
- Prefer const over let when variable won't be reassigned
- Use descriptive variable names - avoid abbreviations
- Add JSDoc comments for all public methods

### CSS Conventions
- Use BEM methodology for class naming
- Class structure: `rift-[block]__[element]--[modifier]`
- Example: `rift-health__bar--critical`
- Use CSS variables for colors, spacing, and timing
- Organize properties consistently: positioning → box model → typography → visual → animation
- Use shorthand properties when applicable

## Technical Implementation Patterns

### Component Architecture
- All UI components should extend from base `UIComponent` class
- Components should implement standard lifecycle methods:
  - `init()` - Setup and initial rendering
  - `update(delta)` - Handle regular updates
  - `render()` - Update DOM representation
  - `dispose()` - Clean up resources and event listeners
- Each component should have a single responsibility

### Event Handling
- Use central event bus for communication between components
- Events should follow `namespace:action` naming pattern
- Example: `health:changed`, `ammo:depleted`, `enemy:killed`
- Always unsubscribe from events in component `dispose()` method
- Include relevant data in event objects

### Performance Considerations
- Batch DOM operations to prevent layout thrashing
- Use CSS transforms and opacity for animations when possible
- Debounce handlers for frequently occurring events
- Use requestAnimationFrame for visual updates
- Implement visibility checks to avoid updating offscreen elements

### State Management
- Component state should be updated through clear interfaces
- Avoid direct manipulation of DOM from outside owning component
- Use data binding pattern for view updates
- Keep source of truth in model objects when possible

## Game-Specific Patterns

### Player Feedback
- Visual feedback should match severity of event
- Critical alerts (low health, danger) should use red/vibration
- Positive feedback (pickups, kills) should use green/blue/gold
- Directional indicators should clearly show source location
- Always provide multiple feedback channels (visual + audio)

### HUD Element Guidelines
- Critical information (health, ammo) always visible
- Secondary information should appear contextually
- Keep screen edges clean except for essential information 
- Center screen should remain mostly clear for gameplay
- Use consistent iconography and color meaning

### Animation Standards
- Enter animations: fade in + slide from edge/scale
- Exit animations: quick fade out, minimal movement
- Attention animations: pulse/glow, avoid excessive movement
- Damage feedback: directional, intensity matches damage amount
- Keep animations under 300ms for interface elements
- Reserve longer animations for major achievements/events

## Development Workflow

### PowerShell Commands
- Use PowerShell for all command-line operations on this project
- Common commands:
  - Start dev server: `npm run dev`
  - Copy assets: `.\copyAssetsToPublic.ps1`
  - Deploy build: `npm run build`

### Testing Approach
- Test components in isolation whenever possible
- Create test scenarios for common gameplay states
- Verify performance with browser dev tools
- Test across multiple screen sizes
- Check for memory leaks during prolonged use
- Validate color contrast for accessibility

### Implementation Order
- Start with foundational components and work up
- Order: Core architecture → HUD components → Notification system → Menu systems → Enhanced features

## Specific Project Insights

### Critical Paths
- UIManager is the central coordination point for all UI elements
- Health and ammo displays are the most frequently updated elements
- Damage indicators are critical for player survival feedback
- Minimap system has custom rendering requirements

### Known Pain Points
- Direct DOM manipulation in UIManager makes changes risky
- Current CSS has specificity conflicts that need resolution
- No standardized way to add new UI components
- Performance issues with multiple simultaneous notifications
- Current hit indicators lack directional clarity

### Integration Notes
- World class provides the main game state
- WeaponSystem manages current weapon and ammo state
- AssetManager must be used for loading all assets
- Player class contains health and status information
- Config contains game-wide settings and constants

### User Preferences
- Aim for highly polished AAA-quality visuals
- Focus on immersion and fluid gameplay
- Add features that enhance excitement and engagement
- Maintain consistent premium aesthetic throughout

This document will evolve as we learn more about the project and establish new patterns and preferences.
